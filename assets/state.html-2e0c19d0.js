const t=JSON.parse('{"key":"v-43c4dafa","path":"/posts/CS/front-end/practice/state.html","title":"状态","lang":"zh-CN","frontmatter":{"title":"状态","icon":"any","date":"2023-05-07T00:00:00.000Z","category":["挖坑"],"description":"状态——这是个很棒的概念，因为这个概念什么都不是，所以你几乎可以把任何东西填进去，把这里作为一个知识库各种玩意的一个中继点。就像 js 原型链最头头上是个 null。 “状态” 相比 Expressions，Statements 远没有那么天经地义，还有很多名词都能让我想到这个东西...状态机，寄存器，记忆，temp，channel...嗯。经典的定义与赋值就属于Statements。编程里的单等号不是数学表示相等的等号而是“赋值”。 我又在react文档看到了这部分... useState 弄出的东西被叫做组件的记忆，而为了代码的健壮，通常，我们要谨慎的设计、控制、最小化这一部分。 状态机。程序，计算机提供的所以服务都能被看作是，状态机。 从编程角度来讲，在以 C 语言为代表的高级语言的控制流出现之前，在编程还是直接在内存里到处 jump 的年代，就已经有状态这个概念了，在那时也确实会需要流程图这种玩意——全是 goto，不画个图代码可能是真的没法看，而这里画的这个图，就可以看做一种状态机(代码如果看得懂的话也是)。 一个人能能走的多远不在于他在顺境时能走的多快，而在于他在逆境时多久能找到曾经的自己。——KMP/动态规划。 前端的一些“状态管理”的库或者说方案，还有那个有名的RxJS... Promise, 甚至上升到一些编程范式设计模式，比如各种“生命周期”... 编译原理中的一些。 甚至在狭义的编程之外，一些素材比如图像处理之类的，会用各种线把各种模块连在一起搞出一个...流水线一样东西。","head":[["meta",{"property":"og:url","content":"https://huamurui.github.io/posts/CS/front-end/practice/state.html"}],["meta",{"property":"og:site_name","content":"花木瑞"}],["meta",{"property":"og:title","content":"状态"}],["meta",{"property":"og:description","content":"状态——这是个很棒的概念，因为这个概念什么都不是，所以你几乎可以把任何东西填进去，把这里作为一个知识库各种玩意的一个中继点。就像 js 原型链最头头上是个 null。 “状态” 相比 Expressions，Statements 远没有那么天经地义，还有很多名词都能让我想到这个东西...状态机，寄存器，记忆，temp，channel...嗯。经典的定义与赋值就属于Statements。编程里的单等号不是数学表示相等的等号而是“赋值”。 我又在react文档看到了这部分... useState 弄出的东西被叫做组件的记忆，而为了代码的健壮，通常，我们要谨慎的设计、控制、最小化这一部分。 状态机。程序，计算机提供的所以服务都能被看作是，状态机。 从编程角度来讲，在以 C 语言为代表的高级语言的控制流出现之前，在编程还是直接在内存里到处 jump 的年代，就已经有状态这个概念了，在那时也确实会需要流程图这种玩意——全是 goto，不画个图代码可能是真的没法看，而这里画的这个图，就可以看做一种状态机(代码如果看得懂的话也是)。 一个人能能走的多远不在于他在顺境时能走的多快，而在于他在逆境时多久能找到曾经的自己。——KMP/动态规划。 前端的一些“状态管理”的库或者说方案，还有那个有名的RxJS... Promise, 甚至上升到一些编程范式设计模式，比如各种“生命周期”... 编译原理中的一些。 甚至在狭义的编程之外，一些素材比如图像处理之类的，会用各种线把各种模块连在一起搞出一个...流水线一样东西。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://huamurui.github.io/"}],["meta",{"property":"og:updated_time","content":"2023-06-11T11:38:25.000Z"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"状态"}],["meta",{"property":"article:published_time","content":"2023-05-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-11T11:38:25.000Z"}]]},"headers":[{"level":3,"title":"1. isActive","slug":"_1-isactive","link":"#_1-isactive","children":[]},{"level":3,"title":"2. dialog bubble","slug":"_2-dialog-bubble","link":"#_2-dialog-bubble","children":[]},{"level":3,"title":"3. floating action button","slug":"_3-floating-action-button","link":"#_3-floating-action-button","children":[]},{"level":3,"title":"4. slider","slug":"_4-slider","link":"#_4-slider","children":[]},{"level":3,"title":"5. action game | platformer","slug":"_5-action-game-platformer","link":"#_5-action-game-platformer","children":[]}],"git":{"createdTime":1683472502000,"updatedTime":1686483505000,"contributors":[{"name":"huamurui","email":"yuntai013@outlook.com","commits":5}]},"readingTime":{"minutes":7.64,"words":2292},"filePathRelative":"posts/CS/front-end/practice/state.md","localizedDate":"2023年5月7日","excerpt":"<p>状态——这是个很棒的概念，因为这个概念什么都不是，所以你几乎可以把任何东西填进去，把这里作为一个知识库各种玩意的一个中继点。<s>就像 js 原型链最头头上是个 null。</s></p>\\n<details>\\n<summary>\\n<blockquote>\\n<p>“状态”</p>\\n</blockquote>\\n</summary>\\n<blockquote>\\n<blockquote>\\n<p>相比 Expressions，Statements 远没有那么天经地义，还有很多名词都能让我想到这个东西...状态机，寄存器，记忆，temp，channel...嗯。经典的定义与赋值就属于Statements。编程里的单等号不是数学表示相等的等号而是“赋值”。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>我又在react文档看到了这部分... useState 弄出的东西被叫做组件的记忆，而为了代码的健壮，通常，我们要谨慎的设计、控制、最小化这一部分。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>状态机。程序，计算机提供的所以服务都能被看作是，状态机。<br>\\n从编程角度来讲，在以 C 语言为代表的高级语言的控制流出现之前，在编程还是直接在内存里到处 jump 的年代，就已经有状态这个概念了，在那时也确实会需要流程图这种玩意——全是 goto，不画个图代码可能是真的没法看，而这里画的这个图，就可以看做一种状态机(代码如果看得懂的话也是)。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>一个人能能走的多远不在于他在顺境时能走的多快，而在于他在逆境时多久能找到曾经的自己。——KMP/动态规划。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>前端的一些“状态管理”的库或者说方案，还有那个有名的RxJS... Promise, 甚至上升到一些编程范式设计模式，比如各种“生命周期”...</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>编译原理中的一些。</p>\\n</blockquote>\\n<hr>\\n<blockquote>\\n<p>甚至在狭义的编程之外，一些素材比如图像处理之类的，会用各种线把各种模块连在一起搞出一个...流水线一样东西。</p>\\n</blockquote>\\n</blockquote>\\n</details>","autoDesc":true}');export{t as data};
