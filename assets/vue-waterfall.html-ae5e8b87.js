import{a6 as c,F as i,G as u,D as n,R as s,M as a,ac as o,ad as e,V as l}from"./framework-913605ae.js";const r={},d={href:"https://github.com/huamurui/vue-biu-waterfall",target:"_blank",rel:"noopener noreferrer"},k={href:"https://biubiubiu.huamurui.me/",target:"_blank",rel:"noopener noreferrer"},m=n("br",null,null,-1),h=n("br",null,null,-1),v=n("br",null,null,-1),b=n("br",null,null,-1),f=n("br",null,null,-1),g=n("h2",{id:"瀑布流-计算部分",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#瀑布流-计算部分","aria-hidden":"true"},"#"),s(" 瀑布流，计算部分")],-1),_=n("p",null,[s("1.基础的版本,或者说实现核心主要是维护一个数组，数组存的是每一列的高度，根据现有高度选择新增元素会插到哪里，最简单的就是每次新增在高度最小的那一列填。"),n("br"),s(" 2.有关列数，如果是平常简单的设计...直接把元素宽度或者说列宽固定，拿到窗口大小后两个做个除法得到一个变量就可以了，得到这个值就是要排的列数。或者更懒一点直接把列数写死也没问题。而有关元素高度，常见的做法有等比放缩一下。")],-1),w={class:"hint-container details"},y=n("summary",null,"1.2.基础版算列数，等比放缩..",-1),x={href:"https://github.com/myst729/Waterfall",target:"_blank",rel:"noopener noreferrer"},j=e(`<p>害...我今天才知道原来单纯的js就有这么多在dom上的方法了，</p><blockquote><p>let cellsContainer = document.getElementById(&#39;cells&#39;)<br> document.createDocumentFragment<br> document.createElement<br> document.body.children; 那parent肯定也有对吧...<br> className不是自己起的名字...而真的是html-css-js里有的属性，可以在js中调用的。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">//算列数</span>
  <span class="token keyword">const</span> <span class="token function-variable function">getColumnCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token constant">COLUMN_WIDTH</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">MIN_COLUMN_COUNT</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//初始化columnHeights</span>
  <span class="token keyword">const</span> <span class="token function-variable function">resetHeights</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    columnHeights <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cellsContainer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token punctuation">(</span>count <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">COLUMN_WIDTH</span> <span class="token operator">+</span> <span class="token constant">GAP_WIDTH</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token constant">GAP_WIDTH</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token function-variable function">adjustCells</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cells<span class="token punctuation">,</span> reflow</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> columnIndex <span class="token operator">=</span> <span class="token function">getMinKey</span><span class="token punctuation">(</span>columnHeights<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> columnHeight<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cells<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Place the cell to column with the minimal height.</span>
      columnIndex <span class="token operator">=</span> <span class="token function">getMinKey</span><span class="token punctuation">(</span>columnHeights<span class="token punctuation">)</span><span class="token punctuation">;</span>
      columnHeight <span class="token operator">=</span> columnHeights<span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//columnHeights就是需要维护的数组</span>
      cells<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token punctuation">(</span>cells<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token constant">CELL_PADDING</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
      cells<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> columnIndex <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token constant">COLUMN_WIDTH</span> <span class="token operator">+</span> <span class="token constant">GAP_WIDTH</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
      cells<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> columnHeight <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
      columnHeights<span class="token punctuation">[</span>columnIndex<span class="token punctuation">]</span> <span class="token operator">=</span> columnHeight <span class="token operator">+</span> <span class="token constant">GAP_HEIGHT</span> <span class="token operator">+</span> cells<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>reflow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cells<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;cell ready&#39;</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cellsContainer<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token function">getMaxVal</span><span class="token punctuation">(</span>columnHeights<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">;</span>
    <span class="token function">manageCells</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),C=n("p",null,"3.但...看了这么久会觉得不多写点就有点对不住，所以有了第三种，根据窗口宽度与提供的默认列宽算出一个列数，然后根据这个列数去重定义列宽达到更好的填充效果。",-1),H={class:"hint-container details"},M=n("summary",null,"3.为了更好填充而做的计算",-1),W={href:"https://github.com/MopTym/vue-waterfall",target:"_blank",rel:"noopener noreferrer"},E=e(`<p>这部分代码来自这个仓库，原作者还写了很多功能...只不过好大一部分并不是我想要的，过程把我看的麻麻的。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
  <span class="token comment">//综下所述，我觉得，叫getCellsWidthAndColumCount更好</span>
  <span class="token comment">//这个策略是算列数和每列的宽度，主要变量有...有好多。抄了！</span>
  <span class="token keyword">function</span> <span class="token function">getRowStrategy</span><span class="token punctuation">(</span>width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> options<span class="token operator">:</span> WaterfallConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> width <span class="token operator">/</span> options<span class="token punctuation">.</span>lineGap
    <span class="token comment">// 列数，利用默认值计算的，向下取整</span>
    <span class="token keyword">let</span> slotWidth
    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>singleMaxWidth <span class="token operator">&gt;=</span> width<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      count <span class="token operator">=</span> <span class="token number">1</span>
      slotWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> options<span class="token punctuation">.</span>minLineGap<span class="token punctuation">)</span>
      <span class="token comment">//如果元素宽度比窗口还大，直接一列，让元素宽取可以取到的最大</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> maxContentWidth <span class="token operator">=</span> options<span class="token punctuation">.</span>maxLineGap <span class="token operator">*</span><span class="token operator">~</span><span class="token operator">~</span>count
<span class="token keyword">let</span> minGreedyContentWidth <span class="token operator">=</span> options<span class="token punctuation">.</span>minLineGap<span class="token operator">*</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token comment">//~~应该是取整的意思，这里计算出两个变量，最大最小的整体宽度</span>
      <span class="token keyword">let</span> canFit <span class="token operator">=</span> maxContentWidth <span class="token operator">&gt;=</span> width
      <span class="token keyword">let</span> canFitGreedy <span class="token operator">=</span> minGreedyContentWidth <span class="token operator">&lt;=</span> width
      <span class="token comment">//...greedy，...做两个布尔值，然后是判断。</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>canFit <span class="token operator">&amp;&amp;</span> canFitGreedy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token comment">//round四舍五入</span>
        slotWidth <span class="token operator">=</span> width <span class="token operator">/</span> count<span class="token comment">//单元素宽度...再次赋值</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>canFit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span>count
        slotWidth <span class="token operator">=</span> width <span class="token operator">/</span> count
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>canFitGreedy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        count <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        slotWidth <span class="token operator">=</span> width <span class="token operator">/</span> count
        <span class="token comment">//这两个else if，count取整一个向上一个向下，然后和上面一样计算单元素宽度</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">//最后这种...向下取整，宽度取最大</span>
        count <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span>count
        slotWidth <span class="token operator">=</span> options<span class="token punctuation">.</span>maxLineGap
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//如果算完了还是一列，那么宽度取最大</span>
        slotWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> options<span class="token punctuation">.</span>singleMaxWidth<span class="token punctuation">)</span>
        slotWidth <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>slotWidth<span class="token punctuation">,</span> options<span class="token punctuation">.</span>minLineGap<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      width<span class="token operator">:</span> <span class="token function">getArrayFillWith</span><span class="token punctuation">(</span>slotWidth<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//元素宽度...也许是为了grow的时候方便用的，也是可以删掉...</span>
      count<span class="token operator">:</span> count<span class="token punctuation">,</span><span class="token comment">//列数...重命名以下，columnCount</span>
      left<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment">//如果你不用的话...把这个删了吧。</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),I=n("h2",{id:"瀑布流-web实现",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#瀑布流-web实现","aria-hidden":"true"},"#"),s(" 瀑布流，web实现")],-1),T=n("p",null,[s("是的...计算部分也没多少麻烦，但想要做成成品还要好大一段路...除了把计算后的数值塞回到节点style里，还有好多问题。"),n("br"),s(" 就，比如，滚动懒加载，用户改变窗口大小......这些重新组织UI的过程可以做成动画，动画又怎么绑定...")],-1),L=n("blockquote",null,[n("p",null,"ps:而我现在在vue里做的时候...绝大部分时间都花在了代码拆分后重新组织通信上，毕竟我没那么熟悉这些...一路上踩了好多好多坑啊...")],-1),G=n("p",null,[s("懒加载可以监听scroll事件进行高度计算，超过一定的值就加载，顺便把不在窗口内被划过去的dom解除一下。动画方面，这里是通过调html的className表示状态，然后相应状态写css动画。"),n("br"),s(" 而为了避免一些鬼畜效果，调用各块函数的同时用setTimeout弄几个防抖也是需要的。")],-1),S={class:"hint-container details"},N=n("summary",null,"lazy-load & css animation",-1),D={href:"https://github.com/myst729/Waterfall",target:"_blank",rel:"noopener noreferrer"},P=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> <span class="token function-variable function">manageCells</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Lock managing state to avoid another async call. See {Function} delayedScroll.</span>
    managing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> cells <span class="token operator">=</span> cellsContainer<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
    <span class="token keyword">let</span> viewportTop <span class="token operator">=</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span> <span class="token operator">-</span> cellsContainer<span class="token punctuation">.</span>offsetTop<span class="token punctuation">;</span>
    <span class="token keyword">let</span> viewportBottom <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span> <span class="token operator">+</span> viewportTop<span class="token punctuation">;</span>

    <span class="token comment">// Remove cells&#39; contents if they are too far away from the viewport. Get them back if they are near.</span>
    <span class="token comment">// TODO: remove the cells from DOM should be better :&lt;  :&gt; :) :(</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cells<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> viewportBottom <span class="token operator">&gt;</span> <span class="token constant">THRESHOLD</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>viewportTop <span class="token operator">-</span> cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>offsetHeight <span class="token operator">&gt;</span> <span class="token constant">THRESHOLD</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">&#39;cell ready&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fragment <span class="token operator">=</span> cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>
          cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
          cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;cell shadow&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">===</span> <span class="token string">&#39;cell shadow&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fragment<span class="token punctuation">;</span>
          cells<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;cell ready&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// If there&#39;s space in viewport for a cell, request new cells.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>viewportBottom <span class="token operator">&gt;</span> <span class="token function">getMinVal</span><span class="token punctuation">(</span>columnHeights<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Remove the if/else statement in your project, just call the appendCells function.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isGithubDemo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">appendCellsDemo</span><span class="token punctuation">(</span>columnCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">appendCells</span><span class="token punctuation">(</span>columnCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Unlock managing state.</span>
    managing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.pending</span> <span class="token punctuation">{</span>
  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>50px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.ready</span> <span class="token punctuation">{</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 
    opacity 1s ease-in-out<span class="token punctuation">,</span> 
    box-shadow 300ms ease-in-out<span class="token punctuation">,</span> 
    left 700ms ease-in-out<span class="token punctuation">,</span> 
    top 700ms ease-in-out<span class="token punctuation">,</span> 
    transform 700ms ease-in-out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.shadow</span> <span class="token punctuation">{</span>
  <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A=n("h2",{id:"瀑布流-和vue有啥关系-绕圈圈",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#瀑布流-和vue有啥关系-绕圈圈","aria-hidden":"true"},"#"),s(" 瀑布流，和vue有啥关系 && 绕圈圈")],-1),F=n("p",null,"要说的话...没关系，你看上面用js手搓的效果都已经那么好了。也许写网页也是，用不用这些库和框架都无所谓...",-1),O=n("blockquote",null,[n("p",null,[s("ps:我又了解了css里叫flex的一种布局，似乎...能很轻松的实现简单版本的瀑布流，就是那种一个个小方块那种...。但想要玩花的还是上js吧，css里写计算是真...。"),n("br"),s(" 我想要学着生产的也许是一种错落的秩序，输入的内容依旧是长方形但同时利用这些内容的长与宽去打破完全的秩序，去制造些不一样的...东西。")])],-1),R=n("p",null,"只是这些家伙提供了一套工具与实践方法，啃它们，能做到更多。是的，我看着看着就飘了，我甚至想抄一个花瓣网或者Pinterest这样的东西出来。",-1),B=n("p",null,"但...我依旧不知道怎么写，这是个问题，有两条路，一个是写成小而精的库与工具，另一个是作为大项目的一部分直接丢上去，但这两者我目前功力都基本是0......。 想要小巧就别上vue,ts这些了...原生js能做到...",-1),q=n("p",null,"嗯，还是打算先vue+ts写一个简单的npm包。前天折腾了折腾大概知道包要怎么发了，github action也调通了，就差代码了。 ...我终于开始写代码了，但我写的真烂...其实通都没通，ts也救不了的那种.......... 也许这些...没什么意义。 也许好久之后才会有...",-1),z=n("p",null,"嗯，又过了一天大概算是搞通了。下一步有希望了 :yum 而且，写组件时的思考...————暴露什么样的接口，哪些又要收回到组件内部去控制...这些东西和我使用的框架暴露给我的那些..有些地方好像...",-1),U=e('<h3 id="npm-publish-github-action" tabindex="-1"><a class="header-anchor" href="#npm-publish-github-action" aria-hidden="true">#</a> npm publish &amp; github action</h3><p>写这个包的时候...虽然没什么人用，但毕竟..万一有人看呢？我还是有意识的去控制暴露哪些东西，藏住哪些东西...也算是种自我审查吧。 又添加了一个对proxy，劫持，中介，代理......的理解...也是对封装的理解...?将输入输出流控制住，或者说一一登记记录，...就像...疫情防控一样...就可以对对象的控制更加的精准强力。</p><h3 id="component-props-emit-slot-store" tabindex="-1"><a class="header-anchor" href="#component-props-emit-slot-store" aria-hidden="true">#</a> component &amp; props &amp; emit &amp; slot &amp; store</h3><p>这些部分...算是vue提供的，一种代码组织方式。尤其与原生js相比。</p><p>ps:update:看了一下午react的文档，我想转战react了————&quot;超哦...我写vue的那个组件的时候想的事情，在react文档里被说出来了&quot;(((等我消息</p><h4 id="store" tabindex="-1"><a class="header-anchor" href="#store" aria-hidden="true">#</a> store</h4><p>也许store应该摘出来bb一下，由于组件化对组件内数据做了一定的隔离，进而才有了props、emit，store这一类的，用于组件间重新通信的东西。而store...</p><h3 id="reactive-how-it-works-where-it-works" tabindex="-1"><a class="header-anchor" href="#reactive-how-it-works-where-it-works" aria-hidden="true">#</a> reactive... how it works, where it works</h3><h3 id="css-animation-vue-s-transition-component" tabindex="-1"><a class="header-anchor" href="#css-animation-vue-s-transition-component" aria-hidden="true">#</a> css animation &amp; vue&#39;s transition component</h3><p>必须要v-if之类的进行触发就好憨...写个钩子搞变量解决了。</p><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> javascript</h3><h4 id="statements-expressions-namespace-variable-pure-function-lambda" tabindex="-1"><a class="header-anchor" href="#statements-expressions-namespace-variable-pure-function-lambda" aria-hidden="true">#</a> Statements &amp; Expressions &amp; namespace &amp; variable &amp; pure function &amp; lambda</h4><p>1.Statements &amp; Expressions 如果让现在的我来看...也许Expressions会是干净些的东西，而Statements则是暴力的... Expressions是最基础的，数学的部分，这些代码会有一个...或者说可以自动的被化归为一个明确的值，返回值。比如1+1就是会被化为2. 而Statements远没有这么天经地义，还有很多名词都嫩让我想到这个东西...状态机，寄存器，记忆...嗯。经典的定义与赋值就属于Statements(是的，也许一开始都有的一个疑惑，编程里的单等号不是数学表示相等的等号而是“赋值”)，这是没法自动被化为一个值的，就是说，在这里我们需要手动自己去定义，创造东西，这也是我说它暴力的原因...质量嘛...肯定是比不过天经地义的那套的。但Statements依旧很好用，很tmd方便。</p><p>其实我又在react文档看到了这部分...useState弄出的东西被叫做组件的记忆，而为了代码的健壮，通常，我们要谨慎的设计、控制、最小化这一部分。</p>',14),V={href:"https://zh.javascript.info/closure",target:"_blank",rel:"noopener noreferrer"},$=n("br",null,null,-1),K=n("p",null,"3.pure function & lambda pure function这个是我在尝试拆分函数的时候意识到作用的一个东西。有些函数会操作外部变量，这样...爽，但是相互耦合代码不容易分离，看的时候就不爽了。尤其是vue2中的this关键字获取vue实例，然后随之把各种东西不管是数据还是函数统统挂在这个实例上来回访问...还有直接有把整个vue实例在组件间传来传去的操作...爽是爽，但是...看了些东西之后尤其在我尝试拆解函数时，感觉这样有点坏...对，想要拆东西的时候，为什么要用一堆返回值，而不是操作变量，这些问题一下就清楚了，也能明白为什么要呢么操作了...",-1),J={href:"https://zh.javascript.info/function-expressions",target:"_blank",rel:"noopener noreferrer"},Y=n("blockquote",null,[n("p",null,[s("什么时候选择函数声明与函数表达式？"),n("br"),s(" 根据经验，当我们需要声明一个函数时，首先考虑函数声明语法。它能够为组织代码提供更多的灵活性。因为我们可以在声明这些函数之前调用这些函数。"),n("br"),s(" 这对代码可读性也更好，因为在代码中查找 function f(…) {…} 比 let f = function(…) {…} 更容易。函数声明更“醒目”。"),n("br"),s(" ……但是，如果由于某种原因而导致函数声明不适合我们（我们刚刚看过上面的例子），那么应该使用函数表达式。")])],-1),Q={href:"https://zh.javascript.info/var",target:"_blank",rel:"noopener noreferrer"},X=n("br",null,null,-1),Z=n("br",null,null,-1),nn=n("br",null,null,-1),sn=e('<h4 id="recursion-iteration" tabindex="-1"><a class="header-anchor" href="#recursion-iteration" aria-hidden="true">#</a> Recursion &amp; Iteration</h4><p>update:12-29 嗯...时隔好久我又来更新一下，或者说..填一下坑。 递归这个东西在在我刚接触编程算是让我头疼好久的一个...斐波那契、汉诺塔、小兔子跳...是的它本来就没那么简单。而它也与之后的栈堆、与多叉树与dfs都有关系。而今天...它与状态机，也会有关系。 常常把递归和另一个叫做迭代的放在一起比较，而如果要说两种有什么区别，最简单一个就是，在迭代中人可以利用自己对全局的掌控力直接规定好一切，而递归则...需要人去把很巧妙的让程序一点点自己摸完全局。 但有些工作即使是人也很难直接看穿，大部分递归的程序想要硬改成迭代更是需要人去做更多的工作...</p><h5 id="状态机。" tabindex="-1"><a class="header-anchor" href="#状态机。" aria-hidden="true">#</a> 状态机。</h5><p>程序，计算机提供的所以服务都能被看作是，状态机。</p><h4 id="promise-async-await-callback-function" tabindex="-1"><a class="header-anchor" href="#promise-async-await-callback-function" aria-hidden="true">#</a> Promise &amp;&amp; async &amp; await &amp;&amp; callback function</h4>',5),an={href:"https://zh.javascript.info/callbacks",target:"_blank",rel:"noopener noreferrer"},tn=e('<p>嗯，这里也是，看了好久...但好像卡的bug完全不是理解的问题而是一个脑残操作...我把Promise多包了一层。 但...看了总是好的嘛...<br> 一个想法，await只能在async function里写的原因，可能，如果await外部不是一个async function，不返回一个Promise，那在里层await其实是白写的，如果外层不是async，到外面那一层的时候异步，等待就全都丢了直接把null undefined传出去也是有可能的...吧...<br> Promise是用来让回调函数好看的，用.then来解决回调函数写起来的嵌套和右移问题。 而async &amp; await，主要是await,await是对.then的简写... 而有关原理，Promise如字面一样是种保证...await和迭代器有关.......现在好像对我没什么用。</p><p>再再另外有关函数执行顺序的，时间循环...v8引擎，函数栈啊，微任务宏任务的队列啊...我也是看了一堆，但目前也是没用。</p><h4 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h4><p>...说起来，也是在我搞不定img.onload的那个破玩意的时候瞎看的一堆，js的面向对象.... 该有的应该都不少。只是现在前端好像都不太喜欢用这一部分的东西了...... 我真的看到面向对象的意思时，是java里的那一堆，java bean，model，vo，bo，po，pojo，dto，dao....这里面的o全都是object。。。所以叫tmd面向对象。 工厂模式，构造函数...<br> 构造函数，实例与原型，它们三个是有关系的。<br> 原型链。原型链现在好像还会时不时提到... ————原型对象其实也是普通的对象。几乎所有的对象都可能是原型对象，也可能是实例对象，而且还可以同时是原型对象与实例对象。这样的一个对象，正是构成原型链的一个节点。因此理解了原型，那么原型链并不是一个多么复杂的概念。 确实，根本不用看，看名字就知道了。类似继承那一类的东西。</p><p>crud ... c -&gt;set r -&gt;get u-&gt;set+get d-&gt;set+get</p><h3 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> typescript</h3><p>vue&#39;s bug<br> props + ts不能写 withDefault....那个issue开了有一年多了还没修。</p><p>但说真的...我这里面没用多少typescript...</p><h3 id="css-s-flex-grid-layout" tabindex="-1"><a class="header-anchor" href="#css-s-flex-grid-layout" aria-hidden="true">#</a> css&#39;s flex &amp; grid layout</h3><p>嗯...其实一路过来也看了好多别的操作，css的flex和grid布局之类的...但是如果要写的话，有一部分计算是规避不掉的，那就是维护那个用于储存每一列的高度的数组，这个数组同时也是支持后续懒加载的关键。</p>',10),en={href:"https://www.smashingmagazine.com/native-css-masonry-layout-css-grid",target:"_blank",rel:"noopener noreferrer"},pn=n("p",null,"嗯，grid能做到很多了，看了看，如果用的话估计能省下不少憨批代码...但，真的想玩骚操作还得上js。",-1),on=n("p",null,"啊...这些都好傻逼...不对，我是想说这些原来这么简单...傻逼的是我。",-1),ln=n("h3",{id:"优化。啊",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#优化。啊","aria-hidden":"true"},"#"),s(" 优化。啊")],-1),cn=n("p",null,[s("嗯...其实是今天复习...或者说预习操作系统的时候，看见了一个叫“缺页”的操作，通过虚拟内存这个东西来让计算机运行的更加高效。而在瀑布流这部分代码里...有，或者，可以有一个相似的操作，那就是，把鼠标滚过去的、不再在可视区之内的元素取消渲染，等滚回去之后才再次渲染。"),n("br"),s(" 另外，如果第一次打开页面没有加载出滚动条，就是元素不够多的时候...我写的布局会的懒加载功能会直接停工...但这个bug也提醒了我另一个bug，就是首次加载宽度不正确（过大）的问题，可能也和滚动条有关...所以...其实那200行的代码我还没抄完，比如，按照计算出的行数去获取需要新加载的元素个数。这部分函数如果要写...那我写的那个组件还需要把行数的计算结果也返回给App或者pages组件，用emits之类的。这部分写完了也许可以解决很多，包括首屏过慢的问题。再另外...写防抖...写handler..."),n("br"),s(" 不想动......")],-1),un=n("h3",{id:"下一步工作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#下一步工作","aria-hidden":"true"},"#"),s(" 下一步工作...")],-1),rn=n("br",null,null,-1),dn=n("br",null,null,-1),kn=n("br",null,null,-1),mn=n("h2",{id:"别看-废案-错误百出-虽然上面也一样",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#别看-废案-错误百出-虽然上面也一样","aria-hidden":"true"},"#"),s(" 别看，废案，错误百出("),n("s",null,"虽然上面也一样"),s(")")],-1),hn=n("details",{class:"hint-container details"},[n("summary",null,"啥都没干就瞎bb的部分"),n("h3",{id:"_1-工程问题",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-工程问题","aria-hidden":"true"},"#"),s(" 1.工程问题")]),n("p",null,"瀑布流其实也是一个经典的item in items的玩意，通常，代码方面对这玩意设计就是，对单个item写一个组件，对items写一个组件。 这里要使用到的两个比较重要的东西一个是props，一个是插槽 slot...也许还要再提前说一下组件。"),n("p",null,"vue2，里面很重要的一个东西叫组件，就像面向对象的类一样，它们也可以有叫做 parent-child 的关系，但与面向对象的继承不太一样，组件中这种关系叫做“注册”，小组件引入、注册到大组件之中——这里的大组件在最后是要直接展示起作用的。而面向对象中的父类可能只是搭个架子，并不会被实例化，最后干活的是子类。"),n("p",null,"props，使用的时候，一般是作为子组件的那个组件里的 props。那是给父组件开的一个接口，从父那里拿数据传到子组件，经过子组件处理后展示在子组件的 template 里，然后再由父组件调用、一整个展示。嗯，一个子组件可以有许多个父组件，给哪个用都行，这样就把一个小功能块拆了出了，方便复用。"),n("p",null,"slot，插槽，也是我在这一次新学到的一个用法。 如果不使用插槽，一个item in items的操作通常要将item组件放在items组件里组合好了再把items再交出去给别人用。 虽然不知道这样有什么不好...但是就是想要拆一拆。"),n("p",null,"但如果用插槽... item组件写好props开插槽 items组件也是一样写好props开插槽 直接交出去这两个，组合交给后边去做"),n("p",null,"在pages里引入并调用时，items组件的插槽位置里放的就是item 而item的插槽会放进具体的需要个性化定制的玩意，....好像items也可以在这里进行一些定制... 对，组合全都发生在了pages中。 定制与数据传输绑定也是，这些全都在pages的组合组件中去写，可以直接传给单个的item。 而，如果没有插槽，就不能在pages中直接碰到item。"),n("p",null,"组件的循环与递归。 我是觉得我选的有点巧...瀑布流是用了vue的v-for指令来排item组件，而隔壁的多级评论用的是组件递归。刚好一种一个。vue提供的写法也是真优雅..."),n("h3",{id:"_2-那-就从数据设计开始吧",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-那-就从数据设计开始吧","aria-hidden":"true"},"#"),s(" 2.那，就从数据设计开始吧")]),n("p",null,"大组件的props。 瀑布流配置选项 autoResize: 一个boolean，关键字段，是否开启自动适应窗口改变UI interval: {防抖时间间隔，默认200ms lineGap: {列间隔 minLineGap: {最小最大列间隔 maxLineGap: { singleMaxWidth: {单个元素的最大宽度 fixedHeight: {固定高度"),n("p",null,"align这个值和getLeft这个函数有关... 为啥我觉得这函数没啥用... left貌似才是默认选项...就是不做处理。 嗯...这个left意味蛮深的，用于计算虚拟矩形的位置的...为什么不直接写死啊，这么点差别这么多信息，值得么？ 嗯，删了。又少了好几十行。这样的话...9个选项。"),n("p",null,"....为啥一加载右边就弹出一个空白条了... 不管了。以后再说。"),n("p",null,"子组件的props，数据传入。item由 width: height: order: moveClass:"),n("p",null,"高与宽度都是getItem给的，order是vue自动生成的index...这个就很魔性，开发者工具检查就找不到这个数值。 moveClass: 是css动画。但...先删了算了"),n("p",null,"在小组件的create钩子中，有虚拟矩形的初始值。 this.rect = { top: 0, left: 0, width: 0, height: 0, } 这个虚拟矩形会由大组件计算出来，再传回给小组件，最后通过绑定到小组件div标签的css样式实现展示。"),n("p",null,"这是原始矩形。除了必要的计算数据。随之一并给出的还有vm，node.... getMeta() { return { vm: this, node: this.$el, order: this.order, width: this.width, height: this.height, moveClass: this.moveClass, }"),n("h3",{id:"_3-好了-再看看两个组件-也许还得加上pages-三个组件的数据流",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-好了-再看看两个组件-也许还得加上pages-三个组件的数据流","aria-hidden":"true"},"#"),s(" 3.好了，再看看两个组件...也许还得加上pages，三个组件的数据流")]),n("p",null,"pages里传入数据，数据分为两种，一种是瀑布流配置选项，一种是流入的..需要处理展示的数据。 配置选项自然直接给到了大组件，而而由于某种拆分的执念，需要处理、展示的数据是直接进入到小组件之中的...但数据处理的大头依旧在大组件。 所以，小组件拿到数据后要给到大组件，大组件通过计算后，传回给小组件一串css代码（...或者说直接把小组件的node拿到手然后狂暴轰入），小组件再把这个给到自己的标签样式上，实现大小的控制。"),n("p",null,"嗯，具体的数据流通如何实现？ props不必说。 而metas的传输是大组件粗暴的直接调用子组件的getMeta方法 let metas = $children(this).map((slot) => slot.getMeta()) 处理后的数据，粗暴的传入metas[i].node.style。传过去的node也许就是为了这里..."),n("p",null,"好了，这部分大概也可以结束了"),n("h4",{id:"_3-1状态",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-1状态","aria-hidden":"true"},"#"),s(" 3.1状态")]),n("p",null,[s("小组件的 notify() { "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"e"),n("mi",null,"m"),n("mi",null,"i"),n("mi",null,"t"),n("mo",{stretchy:"false"},"("),n("mi",null,"t"),n("mi",null,"h"),n("mi",null,"i"),n("mi",null,"s"),n("mi",{mathvariant:"normal"},".")]),n("annotation",{encoding:"application/x-tex"},"emit(this.")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"mi"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"hi"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord"},".")])])]),s("parent, 'reflow', this) }, 对应的是大组件的 $on(this, 'reflow', () => { this.reflowHandler() }) 这个...很重要。但这样的话..是每个小组件都会调用一次reflowHandler？ 嗯。没错。这也太。。。害。")]),n("p",null,"另一个与多次加载还有...isShow掩藏实在界有关，是大组件里的 $emit(this, 'reflowed') 为什么这个时间没有on去声明就可以用... 删掉这一行会让懒加载只能用一次。 删掉pages标签上的也会让懒加载只能用一次。。。 好吧。这个emit就是大组件给大大组件的。 是pages里的函数。addItems会把isBusy设为true需要在reflowed这里把isBusy改回false才可以reflow。"),n("p",null,"好吧。都不是大问题。"),n("h3",{id:"_4-好像大概看懂了",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-好像大概看懂了","aria-hidden":"true"},"#"),s(" 4.好像大概看懂了")]),n("p",null,"我寻思。可以开始自己整了。 组件通信根本不需要this。虽然这一路看下来...他们this用的很爽。。 eventbus也根本不需要on off once直接emit，就完了 发布订阅的三个选项（instance，event_name（key），function） ————————————————————————"),n("h3",{id:"_5-vue在这过程中提供了什么-干了什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-vue在这过程中提供了什么-干了什么","aria-hidden":"true"},"#"),s(" 5.vue在这过程中提供了什么？干了什么？")]),n("p",null,"——————————————————————"),n("h3",{id:"_6-还有核心的-那一大坨做计算的函数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-还有核心的-那一大坨做计算的函数","aria-hidden":"true"},"#"),s(" 6.还有核心的，那一大坨做计算的函数")]),n("p",null,"算了...看结构 methods里写了三个函数，但只写了名字...大概是方便用vue的this调用"),n("p",null,"reflowHandler和时间，token有关...算是个封装。 interval是个防抖的时限？默认200ms。而reflowHandler给出的token就是200ms内一次reflow...大概。 嗯，确实，除了reflowHandler自己，没有直接调用reflow的地方。 就是说...mothods里写的reflow只用了这一个地方。"),n("p",null,"autoResizeHandler看到窗口变化也要调reflowHandler。"),n("p",null,"tidyUpAnimations getTransitionEndEvent 两个和动画效果相关的。 之前几个地方的moveClass也是与动画效果有关..."),n("p",null,"好了，到reflow了。 这算是一个...调用集中点。 常规的获取窗口宽度calculate计算得到排布方式...除此之外"),n("p",null,"使用了一个叫metas的玩意去作为中介... let metas = this.$children.map((slot) => slot.getMeta()) 还有之前在子组件里的getMeta，返回了order，长宽，node节点等子组件的信息。 这个metas的数据几乎...贯穿全部。"),n("p",null,"另外this也并没有消失，而是传入给了后边的函数，通常是写作vm。 getOptions这个方法里是最多的。而这里，return了一串props里的数据，有关大组件的排布的.... 又是一次封装... 在calculate中，getOptions拿到排布数据，传给更具体的处理机制，然后，...就是计算了，终于到tmd计算了。 verticalLineProcessor 和 另一个horizontal什么的... 还有tmd getRowStrategy getGreedyCount..."),n("p",null,"这里有一种二分，那就是rect和meta。meta是原始大小，rect是通过计算后、真正会展示出的大小。"),n("p",null,"瀑布流，简单的版本主要是维护一个数组，数组存的是每一列的高度，每次新增在高度最小的那一列填。 有关列数，如果是平常简单的设计...直接把元素大小固定，拿到窗口大小后两个做个除法得到一个变量就可以了，得到这个值就是要排的列数。或者更懒一点直接把列数写死也没问题。 可是这里很细..很tmd细，也很tmd让人头疼。但不算怎样效果是很惊艳丝滑的，会根据窗口大小去同时计算元素大小和列数，做到很炫酷的即时填充，再加上动画简直太酷了。而，这是通过加了一堆函数，还有rect这个变量作为中介来实现的。"),n("p",null,"如果metas是虚拟矩形... 真的需要这么多吗... 也许需要吧..."),n("p",null,"好了，看完了，差不多。还行。"),n("h3",{id:"_7-重做的话-要做的是",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-重做的话-要做的是","aria-hidden":"true"},"#"),s(" 7.重做的话，要做的是")]),n("p",null,"建好文件，用vue3重写那些东西...props，emits。 还有在各个组件内部的那些方法。"),n("p",null,"再然后是，用this.xxx这种方法调用函数的又是什么... 如果不用vue的this，函数相互调用组合...怎么组合？写成一大堆const 字符串，里面放箭头函数？这还是在一个文件里... 拆出utils...还是另一回事。"),n("p",null,"还有一串串的函数的内部结构。 用ts改....可能也是一堆麻烦事。但不是现在要考虑的。"),n("p",null,"还是好难...嘤嘤嘤 该学js了。 好。终于有需求了。")],-1);function vn(bn,fn){const t=l("ExternalLinkIcon"),p=l("RouterLink");return i(),u("div",null,[n("p",null,[s("添一个仓库链接 ["),n("a",d,[s("https://github.com/huamurui/vue-biu-waterfall"),a(t)]),s("]")]),n("p",null,[s("还有demo的链接 ["),n("a",k,[s("https://biubiubiu.huamurui.me/"),a(t)]),s("]")]),n("blockquote",null,[n("p",null,[s("update:12.21."),m,s(" 现在看这真是...绕了一个太大太无用的圈了。"),h,s(" css3有专门支持瀑布流动属性了，是的，不是有各种缺陷（"),a(p,{to:"/posts/CS/front-end/practice/vue-waterfall.md/#csss-flex--grid-layout"},{default:o(()=>[s("有缺陷的")]),_:1}),s("）仍要js帮忙的，而是直接就可以实现。是grid布局下的一个标签masonry（grid-template-rows:masonry），只不过大部分浏览器或者说谷歌的浏览器还没支持，现在只在火狐的测试模式里有，要专门去打开一下才能用。"),v,s(" 真要实现支持可能还要等好久吧...到那时候就随便做了。"),b,s(" 想想看css真是把一大票活都干了，h5加上css3好厉害..."),f,s(" 好棒...但是感觉...好像没什么事可做了一样，好玩的东西别人都玩遍了拿来就能用，需要动手花精力的只剩那些无聊的对接工作...")])]),g,_,n("details",w,[y,n("p",null,[s("这部分代码来自"),n("a",x,[s("myst729/Waterfall"),a(t)]),s("... 不得不说组织的好棒...也不长，改用新的写法200行js加上css就能把功能做的很好。")]),j]),C,n("details",H,[M,n("p",null,[n("a",W,[s("MopTym/vue-waterfall"),a(t)])]),E]),I,T,L,G,n("details",S,[N,n("p",null,[s("still come from "),n("a",D,[s("myst729/Waterfall"),a(t)])]),P]),A,F,O,R,B,q,z,n("p",null,[a(p,{to:"/posts/CS/front-end/helloworld/why-the-moon.md/#why-some-say-the-moon"},{default:o(()=>[s("why, some say, the moon？")]),_:1})]),U,n("p",null,[s("2.namespace & variable "),n("a",V,[s("闭包 closure"),a(t)]),s(" 这里主要看到的是一个叫闭包的东西...就是，一种...权限管理？全局中的每一个函数，每一个小的代码块都可以访问全局的变量，以此类推代码块中的代码块中的代码块...可以随意的向上向外部环境访问变量，而外部则不能访问内部的变量。"),$,s(" 这里...茫然想起了刚学到C语言时，我发现的一个小东西，两个并列的for循环可以重复使用一个i变量，而如果套在一起，就要用ij两个。还有...在做xxx管理系统的时，我疑惑的在看传入函数的变量是指针还是数值...何时是直接修改变量何时是返回值，还有现在的js函数传递时带括号和不带括号...哦对了，返回值和计组里的PC也有关系。")]),K,n("p",null,[s("另外还有一个，关于写了一大推const xxx = =>这种箭头函数的问题...就是说...箭头函数是很好啦...但这样也不是很好... "),n("a",J,[s("函数声明与函数表达式"),a(t)])]),Y,n("p",null,[n("a",Q,[s("var的历史遗留"),a(t)]),s(" 还有另另外一个，和用var声明变量时期一块的，用来简单实现私有空间，私有作用域的一个操作。"),X,s(" IIFE"),Z,s(" 在之前，JavaScript 中只有 var 这一种声明变量的方式，并且这种方式声明的变量没有块级作用域，程序员们就发明了一种模仿块级作用域的方法。这种方法被称为“立即调用函数表达式”（immediately-invoked function expressions，IIFE）。这里，创建了一个函数表达式并立即调用。因此，代码立即执行并拥有了自己的私有变量。"),nn,s(" 之前给我看懵的的连写两个小括号的操作，就是这里...前一个是函数，后一个是即时传入的参数。")]),sn,n("p",null,[n("a",an,[s("从回调函数开始"),a(t)]),s(" 我这里主要是想写一个img.onload，让图片加载完再传数据到vue那边...然后就看到回调函数这一块了。 也许应该提一嘴的是函数名后面带不带括号的区别？一个是把函数的魂传过去，一个是直接调用。而回调...一般是传魂...吧。而这种传魂的，又叫高阶函数。另一种是直接调用的相互黏在一起的，可能...就是嵌套函数了吧，这里会牵扯到闭包一类的问题...")]),tn,n("p",null,[n("a",en,[s("pure css,grid,waterfall"),a(t)])]),pn,on,ln,cn,un,n("p",null,[s("对，应该考虑下一步做什么，现在的功能...其实有点单调... 要不要做一个点击图片就弹出一个新图层把图片放大展示的？ 再或像pinterset一样，点击图片后直接跳转到新页面然后刷新推荐....这个估计不行，需要后端整活，搞推荐算法什么的... 嗯...我想做的也不只是这之内的..."),rn,s(" 而在我想要修bug的时候...我真怀疑自己做这些的意义。我又去看了看Pinterest，直接一个固定236px的列宽效果就已经够好了，而在超大的屏幕展示上..."),a(p,{to:"/posts/CS/front-end/practice/vue-waterfall.md/#%E7%80%91%E5%B8%83%E6%B5%81%E8%AE%A1%E7%AE%97%E9%83%A8%E5%88%86"},{default:o(()=>[s("那点")]),_:1}),s("优化根本没啥意义...是的，给出了一个方向，但是...也许会有别的起作用的方式，但这样现在这样，并没有什么意义。"),dn,s(" 另一方面，在写法上，vue提供的单组件与模板语法等等...也看不出优势，因为这个功能内部就是需要复杂数据交换，拆组件拆函数...说真的，等想要添新功能的时候，一样无从下手..."),kn,s(" 可能是我的原因，反正也是第一次做..但也许有更好的实现方式，也许vue提供的语法与这个功能本来就没有那么合拍...")]),mn,hn])}const _n=c(r,[["render",vn],["__file","vue-waterfall.html.vue"]]);export{_n as default};
