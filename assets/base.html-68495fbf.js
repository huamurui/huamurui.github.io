import{a6 as n,F as s,G as a,ad as p}from"./framework-913605ae.js";const t={},e=p(`<p>这里会贴一下...前端面试常见的一些问题的自己的总结，背 api 的就不放了，找的是那种可能要讲一小段的那种。</p><h2 id="浏览器地址栏输入-url-后发生了什么" tabindex="-1"><a class="header-anchor" href="#浏览器地址栏输入-url-后发生了什么" aria-hidden="true">#</a> 浏览器地址栏输入 URL 后发生了什么</h2><p>首先 URL 由 <code>协议</code> + <code>域名</code> + <code>端口</code> ++ <code>路径</code> + <code>查询参数</code> + <code>锚点</code> 组成。</p><ul><li><p>网络传输<br> 输入 URL 后，浏览器通过 DNS 解析域名，找到对应的服务器 IP 地址，建立 TCP 连接</p><ul><li>DNS</li><li>TCP 发送 HTTP 协议发送请求，服务器接收到请求后，通过 HTTP 协议返回响应</li><li>cdn <ul><li>cdn 来处理一些常用资源，cdn 服务会根据用户的地理位置，选择离用户最近的服务器，加速资源的加载。</li></ul></li><li>http 缓存 <ul><li>常见的做法是将主页 index.html 做协商缓存，其他静态资源文件名打包加 hash 后做强缓存。</li><li>强缓存是指浏览器直接从本地缓存中读取资源，不需要发送请求到服务器。可以通过设置响应头中的 Cache-Control 和 Expires 来设置强缓存。</li><li>协商缓存是指浏览器发送请求到服务器，服务器根据请求头中的 If-None-Match 和 If-Modified-Since 来判断是否命中缓存。可以通过设置响应头中的 ETag 和 Last-Modified 来设置协商缓存。304 意味着命中缓存。</li></ul></li></ul></li><li><p>渲染<br> 浏览器接收到响应后，通过 HTML 解析出 DOM 树，然后通过 CSS 解析出 CSSOM 树，然后通过 DOM 树和 CSSOM 树合成渲染树， 然后通过渲染树和布局树合成布局树，然后通过布局树和绘制树合成绘制树，然后通过绘制树绘制到屏幕上。</p><ul><li>其中有两个比较重要的概念是，重排和重绘。</li><li>重排是指改变了 DOM 结构或文档流布局，需要重新计算布局，比较耗费性能。</li><li>重绘是指改变了元素的样式，但是没有改变布局，只需要重新绘制，而不需要重新计算布局，性能开销较小。</li></ul></li></ul><h2 id="性能优化" tabindex="-1"><a class="header-anchor" href="#性能优化" aria-hidden="true">#</a> 性能优化</h2><ul><li><p>网络</p><ul><li>cdn</li><li>http 缓存</li><li>http123. <ul><li>如果是更早的 http1.0，那么每次请求都需要建立连接，这时可能将请求合并成一个请求，js css 打包成一个大文件，图片使用雪碧图等等合并资源来减少请求次数等会有很大提升。或者升级协议。</li><li>http1.1 引入了 keep-alive，可以复用连接。如果是 http1.1，那么浏览器会限制同一域名下的并发请求数量，http2 可以多路复用，减少了请求的延迟。</li><li>http3 基于 udp 协议。</li></ul></li><li>打包时 <ul><li>分析依赖，删除不必要依赖，将依赖分成不同的包，按需加载，或将常用资源放 cdn。</li><li>gzip 压缩</li></ul></li></ul></li><li><p>渲染及 js 执行</p><ul><li>重排和重绘 <ul><li>这里可以顺带说说瀑布流这种特殊布局，这类布局目前仍需要使用 js 自己计算来实现排布，而什么时候需要整体重新计算，什么时候只需要局部重新计算bulabula 也是需要做一些考量的。设计的东西蛮多，而浏览器本身的布局渲染的过程也是一个很好的例子引出这个。 <ul><li>具体来说</li><li>实现虚拟化，上下滚动时是不需要计算布局的，只需要根据滚动高度和元素位置给出窗口可视区域内的元素即可。</li><li>滚动触底加载更多时，并不需要全体重新计算，只需要计算新加载的元素然后压入大数组即可。</li><li>而当页面整体宽高变化时，就需要重新计算整体布局。</li></ul></li></ul></li><li>页面超多元素时，懒加载，加上分页与虚拟列表，只加载可视区域内的元素。</li><li>js 编码执行... 这是个..不知道怎么分的问题，太多了 <ul><li>防抖节流 <ul><li>防抖是指用户的操作频繁触发事件，但是只需要在最后一次操作后执行，比如输入框输入时，滚动事件监听加载时，在用户滚动停止后再触发一次去发送请求。</li><li>节流是在一定时间间隔内只执行一次，对于虚拟列表的滚动，用户频繁操作，这类有一定即时性需求的操作，可以使用节流。</li></ul></li><li>事件委托</li><li>异步</li><li>算法缓存 ...</li></ul></li></ul></li><li><p>用户体验 加载动画、懒加载、骨架屏等方式，也许不会让网页实际内容加载更快，但是可以让用户感觉更流畅。</p></li></ul><h2 id="原型链" tabindex="-1"><a class="header-anchor" href="#原型链" aria-hidden="true">#</a> 原型链</h2><p>原型链是 js 实现面向对象特性的一种机制。</p><ul><li><p>js 的构造函数有一个 <code>prototype</code> 属性，这个属性指向一个对象，这个对象被叫做原型对象。</p></li><li><p>创建一个实例时，实例的 <code>__proto__</code> 属性指向构造函数的 <code>prototype</code> 属性指向的对象。</p></li><li><p>实例的 <code>__proto__</code> 属性指向构造函数的 <code>prototype</code> 属性指向的对象，这样就形成了一个链式结构，这个链式结构就是原型链。</p></li><li><p>当访问一个实例的属性时，如果实例没有这个属性，那么会去实例的 <code>__proto__</code> 属性指向的对象中查找，如果还没有，那么会去 <code>__proto__</code> 属性指向的对象中查找，直到找到或者到 <code>Object.prototype</code> 对象为止。</p></li><li><p>继承</p><ul><li>原型链继承 <ul><li>将父类的实例作为子类的原型</li></ul></li><li>构造函数继承 <ul><li>在子类的构造函数中调用父类的构造函数</li></ul></li><li>组合继承 <ul><li>原型链继承和构造函数继承的结合</li></ul></li><li>寄生组合继承 <ul><li>组合继承的优化</li></ul></li></ul></li></ul><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><p>闭包是指一个函数可以访问另一个函数作用域中的变量。</p><ul><li><p>作用域链</p><ul><li>作用域链是指一个函数的作用域链是由它自己的作用域和它的父级作用域组成的。</li><li>作用域链是在函数定义时就确定的，而不是在函数调用时确定的。</li></ul></li><li><p>作用</p><ul><li>保护变量</li><li>延长变量的生命周期</li><li>模块化</li></ul></li><li><p>具体应用</p><ul><li>防抖节流</li><li>高阶函数</li></ul></li></ul><h2 id="this" tabindex="-1"><a class="header-anchor" href="#this" aria-hidden="true">#</a> this</h2><ul><li>默认绑定 <ul><li>全局调用，this 指向全局对象。</li></ul></li><li>隐式绑定 <ul><li>如果函数是作为对象的方法调用的，那么 this 指向这个对象。</li></ul></li><li>显示绑定 <ul><li>如果函数是通过 call、apply、bind 调用的，那么 this 指向这个对象。</li></ul></li><li>new 绑定 <ul><li>如果函数是通过 new 调用的，那么新创建的对象会绑定到函数的 this 上。</li></ul></li><li>箭头函数 <ul><li>箭头函数的 this 是在定义时确定的，而不是在调用时确定的。</li></ul></li></ul><h2 id="事件循环" tabindex="-1"><a class="header-anchor" href="#事件循环" aria-hidden="true">#</a> 事件循环</h2><ul><li><p>宏任务</p><ul><li>script</li><li>setTimeout</li><li>setInterval</li><li>I/O</li><li>UI rendering</li></ul></li><li><p>微任务</p><ul><li>Promise</li><li>MutationObserver</li><li>process.nextTick</li></ul></li><li><p>事件循环的执行顺序是，先执行同步代码，然后执行微任务，然后执行宏任务。</p><ul><li>另一种理解是，同步代码本身也是一个宏任务，执行完同步代码后，会执行这一轮的微任务，然后再执行下一轮宏任务。</li></ul></li><li><p>js 是单线程语言，而为了在一些耗时任务时不阻塞 js 执行，有了事件循环。</p></li></ul><h2 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h2><p>啊</p><h2 id="css-属性分分类类" tabindex="-1"><a class="header-anchor" href="#css-属性分分类类" aria-hidden="true">#</a> CSS 属性分分类类</h2><ul><li><p>布局类</p></li><li><p>圆角边框背景阴影等，可以大幅提高页面观感与完成度的</p></li><li><p>响应式，移动端适配</p><ul><li>@media，px，em，rem，vw vh，%。</li></ul></li><li><p>动画 3d</p></li><li><p>写法上，权重，类命名，预处理 bulabula</p></li></ul><h2 id="vue-react" tabindex="-1"><a class="header-anchor" href="#vue-react" aria-hidden="true">#</a> Vue &amp; React</h2><ul><li>框架和工具的考量并不完全是性能，而是给出不错的性能，同时解决功能实现，减少心智负担，优化代码、工程结构......</li></ul><p>...感觉就剩 api 了</p><ul><li>React <ul><li>f(props)=ui...</li><li>虚拟 dom， fiber 切片，更新</li><li>跨平台</li><li>hooks <ul><li>useState 创建视图绑定的变量</li><li>useReducer 优化复杂 useState 的更新</li><li>useEffect 一种类似响应式的东西...根据依赖变化执行回调，可以用来发请求然后 setState</li><li>useContext 全局变量，组件通信</li><li>useMemo，useCallback。和 vue 的 computed 好像有点像，做缓存，“性能优化”</li></ul></li><li>生态</li></ul></li><li>Vue <ul><li>响应式系统与 UI</li></ul></li></ul><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> pending <span class="token operator">=</span> <span class="token string">&quot;pending&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fulfilled <span class="token operator">=</span> <span class="token string">&quot;fulfilled&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> rejected <span class="token operator">=</span> <span class="token string">&quot;rejected&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 添加状态 rejected</span>

<span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">run</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// run 函数 (resolve, reject) =&gt; any</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 添加一个处理错误的队列</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> pending<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">666</span><span class="token punctuation">;</span> <span class="token comment">// 保存异步结果</span>
    <span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> fulfilled<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> pending<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> rejected<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> err<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallback<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">// 对构造器里传入的函数进行try / catch</span>
      <span class="token function">run</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// !!! 核心</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">resolve</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">reject</span> <span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">all</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
            len   <span class="token operator">=</span> promises<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
            value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> promise <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            count <span class="token operator">++</span><span class="token punctuation">;</span>
            value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token function">race</span><span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> promise <span class="token keyword">of</span> promises<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">catch</span> <span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">666</span><span class="token punctuation">,</span> onRejected<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">then</span> <span class="token punctuation">(</span><span class="token parameter">onResolved<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 添加两个监听函数</span>
    <span class="token comment">// 这里需要对onResolved做一下处理，当onResolved不是函数时将它变成函数</span>
    onResolved <span class="token operator">=</span> <span class="token keyword">typeof</span> onResolved <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span> <span class="token function-variable function">onResolved</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">;</span>
    onRejected <span class="token operator">=</span> <span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span> <span class="token function-variable function">onRejected</span> <span class="token operator">:</span> <span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> err <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">case</span> <span class="token literal-property property">pending</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">// 对整个onResolved进行try / catch</span>
              <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> 
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">// 对整个onRejected进行try / catch</span>
              <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
              <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">case</span> <span class="token literal-property property">fulfilled</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">// 对整个过程进行try / catch</span>
            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onResolved</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// emit</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">case</span> <span class="token literal-property property">rejected</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token comment">// 对整个过程进行try / catch</span>
            <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(t,[["render",c],["__file","base.html.vue"]]);export{k as default};
