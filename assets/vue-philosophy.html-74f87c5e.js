import{a6 as i,F as d,G as c,D as t,R as e,M as a,ac as p,ad as r,V as s}from"./framework-913605ae.js";const h={},l=r('<p>嗯...一直想说出来这些前端框架都干了什么。也顺便参考一下react哲学。等我弄完了有空就补一下这边。</p><p>...过了段时间... 我知道了之前react哲学的很多东西，和设计模式有关... 我刚刚下单了本vue设计与实现... 然后... 等我再看看</p><h2 id="_2023-01-19-2023-01-22" tabindex="-1"><a class="header-anchor" href="#_2023-01-19-2023-01-22" aria-hidden="true">#</a> 2023-01-19 | 2023-01-22</h2><p>嗯..书是12月底就到了，但是让它一躺又躺了这么久......</p><p>不过，我现在感觉 JS 和 web api 了解的更多了，再回来也会更方便一些。</p><h3 id="virtual-dom" tabindex="-1"><a class="header-anchor" href="#virtual-dom" aria-hidden="true">#</a> Virtual DOM</h3><p>虚拟 dom 的出现并不是为了更快，而更多的是为提供更简单的心智模型，让写代码更加的声明式，而不是事无巨细的命令式。为了达成这一点，虚拟 dom 是需要更多的计算的，加上它自己隔的一层，所以这种策略性能上相对那些很 nb 的原生开发者反而是差一些的(跟我没关系)，差多少，就取决于采取的算法和后续的各种优化了。</p><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> Component</h3><p>组件，是一组 DOM 的封装。....我不喜欢封装这个词..<br> 这里的关键词是 props emits slot ，当然还有些普遍给你写好的的像 异步/函数式/动画/弹窗...组件。</p><p>只不过，这里是与具体实践关系更紧密的，或者说...vue 也只是提供了一种...，反正并没有把每一步在 vue 内部写死掉，具体怎么用，怎么组织起来，看自己，这地方...五花八门的。</p>',10),u=r('<h3 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive" aria-hidden="true">#</a> Reactive</h3><p>响应式这里关键的一个就是，劫持。Proxy。 ES6 出了个 Proxy 但只对非原始值对象(引用)起作用，对于原始值对象(直接是拷贝)没有...所以 vue3 在这里也被迫跟着分了个 reactive 和 ref。这里的 Proxy 算是种，元编程，重写对象的 set get 等方法，可以在里面自己埋东西，进而来达到劫持的目的。而对于 vue ，响应式还需要做的一个很重要的，就是和渲染的联动，要将渲染函数，埋进对象的这些操作监听器上。</p><p>对我而言，响应式和好久之前学数据库的脏读幻读啥的...还有自己写的那个布局、动画、小游戏更新画面...都有点像。<br> 而更具体，也更抽象的层面上，这是针对对象的，但是又想要准确及时可靠的把握对象的状态，这些控制，像管道、副作用函数...，又看起来有些，函数式的风格。</p><h3 id="render-compiler" tabindex="-1"><a class="header-anchor" href="#render-compiler" aria-hidden="true">#</a> Render &amp; Compiler</h3><p>在 web 前端这里，渲染是从 JS 到 DOM 元素，编译是从 DOM 到 JS。<br> 通常而言...前者，JS 是运动着的，而 DOM 则被看做是，静态的。</p><blockquote><p>我都不知道你当时在想什么了，编译是指从 模板/JSX(就是，一种新的组织代码的方式，但浏览器不支持) 到渲染函数，而渲染函数，主要就是JS(l浏览器可运行的) ...可能是JS 变 html 变 dom 变画面吧。也算是以此为例... 告诉我，你为什么要写这篇文章，简直就是，...不知道你在干什么。</p></blockquote><p>渲染，这里...怎么说，是(virtual dom | v-node) 到真实的 dom 的转换这一层， vue 的 diff 算法就被放到了这里，首次渲染，patch 最小更新，销毁.....。而编译，下学期正好有门“编译原理”，我也有了解到一门教编程语言的课， rescript ...但是太...感觉没必要不想学.jpg。 vue 以及前端框架所需要的编译相比 C JS 这种编程语言实现的编译并不多，主要是从 template | JSX 到 JS HTML 到 DOM 的过程。编译相关的关键词像 AST、parser ......</p><hr>',8),_=r('<summary></summary><p>当然这本书我还是没细看，里面还有大量的工程细节、优化还有各种领域的知识...也不想看了，</p><p>你知道，互联网，技术公司，有些面试，喜欢问那些xxx源码，xxx实现原理的<br> 我最近看了看那些东西<br> 感觉，就像，……某种取悦上司的杂技一样<br> 包括那些刷题的<br> 对实际工作的意义，其实不大，但是就是会问…<br> 这堆玩意和什么下象棋打乒乓球马拉松，还有小孩弹钢琴跳舞啥的可能没啥区别…<br> 你觉得我让你学这些是为了干活？去写个 nb 的开源软件？不不不，就是为了筛一筛顺便装个逼</p><p><a href="markup-language">你会为了打游戏打的更好去看游戏源码吗？</a></p>',4),m={href:"http://b23.tv/kDrQ958",target:"_blank",rel:"noopener noreferrer"},b=r('<details><summary>don&#39;t</summary><blockquote><p>等等，你个笨蛋，你觉得我为啥要你去学钢琴？<br> 为了让我成为一个音乐家？陶冶情操？<br> 不，我让你去学钢琴，就是为了能拿你朝亲戚显摆。当音乐家？你个笨蛋，你真觉得你能学成个音乐家？你不知道这要花多少钱，不知道自己有多笨吗？</p></blockquote></details><h2 id="_2023-02-08" tabindex="-1"><a class="header-anchor" href="#_2023-02-08" aria-hidden="true">#</a> 2023-02-08</h2><p>嗯...这些和 vue 没啥关系了。</p><p>只是...再吐槽一下，科层制——办公室统治。</p><p>学生花了十几年在那些不能带来实际效益的东西上，在将要进入社会时才发现自己什么都不会，而只能继续去搞那堆玩意，以期望挤进一个不错的科层制企业去...</p><p>在这个基础上，中学的培训班、家教，还有各种计算机互联网的培训，他们就显得更加的...不知道怎么说。</p>',6),f=t("p",null,"即使挤进了一个科层制企业里，事情还是一样，你不知道你做的到底有什么价值——公司企业也许会给你发工资，但是这些钱是怎么来的，你的工作成果最后是谁在使用，他们是喜欢还是厌恶...这些统统全都是不透明的。或者更坏一些，做的就是脏活，帮助着剥削那些快递员或者坑蒙拐骗压事件热度，明确的看到厌恶，但却是工作...",-1),v=t("p",null,"有些时候...感觉...还真不如卖pg来的直接。好想变魅魔...",-1),x=t("p",null,"不管了，继续，抄页面去。",-1),k=t("h2",{id:"_2023-02-21-2023-02-22",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_2023-02-21-2023-02-22","aria-hidden":"true"},"#"),e(" 2023-02-21 | 2023-02-22")],-1),S={href:"https://nextjs.org/learn/foundations/from-javascript-to-react/updating-ui-with-javascript",target:"_blank",rel:"noopener noreferrer"},g=r('<p>有一说一...我 tmd 感觉 react 相关的文档是真的...好康。<br> 就是那种，从八百年前开始讲。<br> 虽然我会用 vue 的一些东西，用到甚至我一直都不知道 vue 到底干了什么的那种。嗯，很丝滑。可这不由得让我有些焦虑，以至于去转头不用 vue 去写小玩具，去买了那本 vue 设计与实现，还有看的一堆家伙吹逼的文章。现在我大概知道了 vue ，以及 web 的这一圈生态在干什么，也看了一堆“历史”...然鹅，react 一开始就在文档 bb 这些东西...</p><p>vue 系的文档是很纯粹的工具说明书，而 react 的文档是...哲学与历史。</p><blockquote><p>可能 vue 把糟糕的历史更多的留给了自己，不了解也能写，而 react 则保留了一部分(故意的)给了用户。不过 react 也没那么底层，现代的 JS 也没那么不能吃，都是调浏览器接口，谁比谁高贵.jpg</p></blockquote><p>当然，react 一堆毛病，说自己是 js 但其实相性并不好甚至反过来逼宫 js ... 谁让它是老大呢。</p><p>props 这个东西和名字和基础的 html 标签的 src href 这些属性原来是很像的... 都是传入一些内容、进而改变形态。cnm，怎么没人早说</p><p>呜，nextjs 的文档指路到 react 的 beta 文档，还有，甚至连编译、打包、渲染、CDN 都要 bb，还让我好好注意了一下 robot.txt，sitemap 之类的，呜呜呜，这就是霸主的责任感吗。。</p><p>嗯...接下来就是实践了，哈哈...做一个博客。好平滑的感觉...比 vue 还要顺滑甚至...呜呜呜！我要是早点看到，啊啊啊。</p><p>不过，之后，到底去做什么...先歇会吧.jpg</p><h2 id="_2023-02-25" tabindex="-1"><a class="header-anchor" href="#_2023-02-25" aria-hidden="true">#</a> 2023-02-25</h2><p>接了个面试。 下周一去看。 react... 用 umi...好像好多人在喷 umi... 抄 next 还一堆毛病。</p><p>我去用这些高度定制的解决方案，最佳实践之类... 是先要学的啊，学到那一套规范，学会怎么交流...</p>',11);function j(y,J){const o=s("RouterLink"),n=s("ExternalLinkIcon");return d(),c("div",null,[t("p",null,[e("inspired by "),a(o,{to:"/posts/CS/front-end/practice/vue-waterfall.html"},{default:p(()=>[e("vue-waterfall")]),_:1}),e(" and "),a(o,{to:"/posts/CS/front-end/practice/cloud-disk.html"},{default:p(()=>[e("cloud-disk")]),_:1})]),l,t("p",null,[a(o,{to:"/posts/CS/front-end/philosophy/software-engineering.html"},{default:p(()=>[e("软件工程")]),_:1})]),u,t("details",null,[_,t("p",null,[e("["),t("a",m,[e("http://b23.tv/kDrQ958"),a(n)]),e("]")])]),b,t("p",null,[e("科层制不靠技能而靠的是关系，但各种考试却又的确需要去学各种...可能压根没用的玩意。“读书改变命运”——重要的不是知识本身，而是，学习能力，再或是，存粹的"),a(o,{to:"/posts/learn-dialectic/formalism.html"},{default:p(()=>[e("形式主义")]),_:1}),e("。")]),f,v,x,k,t("p",null,[e("["),t("a",S,[e("https://nextjs.org/learn/foundations/from-javascript-to-react/updating-ui-with-javascript"),a(n)]),e("]")]),g])}const w=i(h,[["render",j],["__file","vue-philosophy.html.vue"]]);export{w as default};
